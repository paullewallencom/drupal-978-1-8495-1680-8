<?php
/**
 * Implements hook_field_formatter_info().
 */
function d7dev_field_formatter_info() {
  return array(
    'd7dev_integer_duration' => array(
      'label' => t('Duration'),
      'field types' => array('number_integer'),
    )
  );
}

/**
 * Implements hook_field_info_alter().
 */
function d7dev_field_info_alter(&$info) {
  $info['number_integer']['microdata'] = TRUE;
}

/**
 * Implements hook_field_formatter_view().
 */
function d7dev_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'd7dev_integer_duration':
      foreach ($items as $delta => $item) {
        //some simple math to covert the duration minutes to hours and the remainder as minutes
        $hours = floor($item['value']/60);
        $minutes = $item['value']%60;
        //get greatest common denominator of minutes to convert to fraction of hours
        $minutes_gcd = gcd($minutes, 60);
        //&frasl; is the html entity for the fraction separator, and we use the sup and sub html element to give
        //the appearance of a fraction
        $minutes_fraction = '<sup>' . $minutes/$minutes_gcd . '</sup>&frasl;<sub>' . 60/$minutes_gcd . '</sub>';
        $markup = $hours > 0 ? $hours . ' and ' . $minutes_fraction . ' hours' : $minutes_fraction . ' hours';
        //finally, return our formatted value as the markup for this field formatter
        $element[$delta] = array('#markup' => $markup);
      }
      break;
  }

  return $element;
}

//simple helper function to get gcd of minutes
function gcd($a, $b) {
    $b = ( $a == 0 )? 0 : $b;
    return ( $a % $b )? gcd($b, abs($a - $b)) : $b;
}
